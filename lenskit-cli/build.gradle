/*
 * LensKit, an open-source toolkit for recommender systems.
 * Copyright 2014-2017 LensKit contributors (see CONTRIBUTORS.md)
 * Copyright 2010-2014 Regents of the University of Minnesota
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import org.gradle.process.internal.ExecException

apply from: "$rootDir/gradle/maven.gradle"
apply plugin: 'groovy'
apply from: "$rootDir/gradle/test-utils.gradle"

dependencies {
    compile project(':lenskit-all')
    compile group: 'net.sourceforge.argparse4j', name: 'argparse4j', version: '0.7.0'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.3'
    compile group: 'org.fusesource.jansi', name: 'jansi', version: '1.11'
    compileOnly group: 'com.google.auto.service', name: 'auto-service', version: '1.0-rc2'

    runtime group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.12'
    runtime group: 'org.webjars.npm', name: 'viz.js', version: '1.5.1'
}

meta {
    name 'LensKit CLI'
    description 'Command-line tools for interacting with LensKit.'
}

// Render the manpages
task renderManPages(group: 'documentation') {
    description "Renders the man pages with Pandoc."
    ext.manDir = 'src/man'
    ext.outputDir = "$buildDir/man"
    ext.filterScript = 'src/man/filter-manpage.py'
    inputs.files fileTree(manDir) {
        include '*.md'
    }
    inputs.file filterScript
    outputs.dir outputDir
    doLast {
        mkdir outputDir
        for (doc in inputs.sourceFiles.files) {
            def name = doc.name - '.md'
            try {
                exec {
                    executable 'pandoc'
                    args '-Mheader=LensKit'
                    args "-Mfooter=$version"
                    args '-F', file(filterScript)
                    args '-s', '-t', 'man'
                    args '-o', file("$outputDir/$name")
                    args doc
                }
            } catch (ExecException e) {
                logger.warn 'pandoc {}: {}', name, e
                logger.warn 'skipping man page build'
                throw new StopExecutionException("cannot run pandoc")
            }
        }
    }
}