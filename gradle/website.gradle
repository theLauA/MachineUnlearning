/*
 * LensKit, an open-source toolkit for recommender systems.
 * Copyright 2014-2017 LensKit contributors (see CONTRIBUTORS.md)
 * Copyright 2010-2014 Regents of the University of Minnesota
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
class Website {
    def String repo = 'lenskit/lenskit.github.io'
    def Project project

    def getDirectory() {
        project.file("$project.buildDir/website")
    }
}
extensions.create('website', Website)
website.project = project

task fetchSite {
    mustRunAfter javadoc, ':lenskit-gradle:groovydoc'

    doLast {
        if (!website.directory.exists()) {
            exec {
                executable 'git'
                args 'clone', '--depth', '10'
                args "git@github.com:${website.repo}.git"
                args website.directory
            }
        } else {
            exec {
                executable 'git'
                args 'checkout', '--', '.'
                workingDir website.directory
            }
            exec {
                executable 'git'
                args 'pull'
                workingDir website.directory
            }
        }
    }
}

task copyJavadoc(type: Sync, dependsOn: [javadoc, fetchSite]) {
    into "$website.directory/master"

    from(tasks.javadoc.destinationDir) {
        into 'apidocs'
    }
}

project('lenskit-gradle').afterEvaluate { gprj ->
    copyJavadoc {
        dependsOn ':lenskit-gradle:groovydoc'
        from(gprj.groovydoc.destinationDir) {
            into 'gradle-docs'
        }
    }
}

task uploadWeb {
    dependsOn copyJavadoc

    doLast {
        def commit = git.headRevision.abbreviate(8).name()
        exec {
            executable 'git'
            args 'add', '-A', 'master/apidocs', 'master/gradle-docs'
            workingDir website.directory
        }
        exec {
            executable 'git'
            args 'commit', '-m', "rebuild website for $commit"
            workingDir website.directory
        }
        exec {
            executable 'git'
            args 'push', 'origin', 'master'
            workingDir website.directory
        }
    }
}
if (travis.isMasterBuild() && travis.activeJdk == 'oraclejdk8') {
    ciPublish.dependsOn uploadWeb
}
