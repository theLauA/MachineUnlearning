/*
 * LensKit, an open-source toolkit for recommender systems.
 * Copyright 2014-2017 LensKit contributors (see CONTRIBUTORS.md)
 * Copyright 2010-2014 Regents of the University of Minnesota
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
/*
 * This build script contains code for uploading to Maven.
 */

import org.lenskit.build.CustomMavenDeploy

apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

class ProjectMeta {
    def String name
    def String description
    def String packaging = 'jar'

    def call(Closure block) {
        ClosureUtil.configure(this, block)
    }
}
extensions.create('meta', ProjectMeta)

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

artifacts {
    archives sourcesJar
}

tasks.withType(Sign) {
    it.onlyIf {
        for (task in gradle.taskGraph.allTasks) {
            if (task.name == 'uploadArchives') {
                return true;
            } else if (task.name == 'install') {
                return true;
            }
        }
        return false;
    }
}

task installForTesting(type: CustomMavenDeploy, group: 'Deploy') {
    repository = rootProject.file('build/lenskit-current-repo')
}

// enforce ordering on the testing-install operation for parallel builds
// FIXME enforce ordering between adjacent projects
afterEvaluate {
    def pdeps = configurations.runtime.allDependencies.withType(ProjectDependency)
    def pdNames = pdeps*.dependencyProject*.path
    pdNames.each {
        installForTesting.dependsOn "$it:installForTesting"
    }
}

publishing {
    repositories {
        maven {
            def stUser = System.getenv('SONATYPE_USER') ?: project.findProperty('deploy.user')
            def stPasswd = System.getenv('SONATYPE_PASSWORD') ?: project.findProperty('deploy.password')

            def repoUrl = project.findProperty('deploy.url')
            if (!repoUrl && !project.version.endsWith('-SNAPSHOT')) {
                repoUrl 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            }
            url repoUrl ?: 'https://oss.sonatype.org/content/repositories/snapshots/'
            if (stUser && stPasswd) {
                credentials {
                    username stUser
                    password stPasswd
                }
            }
        }
    }
}

tasks.withType(PublishToMavenRepository) {
    onlyIf {
        !(project.getConfigProperty('deploy.skip', 'false').toBoolean())
    }
}

signing {
    required {
        !version.endsWith('SNAPSHOT')
    }
}

// set up the Maven metadata at the end of configuration
afterEvaluate {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId 'org.lenskit'

                from components.java

                artifact sourcesJar {
                    classifier 'sources'
                }
                artifact javadocJar {
                    classifier 'javadoc'
                }

                pom {
                    name = meta.name
                    description = meta.description
                    url = 'http://lenskit.org'
                    scm {
                        connection = 'scm:git:http://github.com/grouplens/lenskit.git'
                        developerConnection = 'scm:git:git@github.com:grouplens/lenskit.git'
                        url = 'http://github.com/grouplens/lenskit'
                    }

                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                    }

                    developers {
                        developer {
                            id = 'mdekstrand'
                            name = 'Michael Ekstrand'
                            email = 'michaelekstrand@boisestate.edu'
                        }
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }
    installForTesting {
        publication = publishing.publications.mavenJava
    }

    rootProject.ciPublish.dependsOn publish
}
