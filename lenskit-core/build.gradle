/*
 * LensKit, an open-source toolkit for recommender systems.
 * Copyright 2014-2017 LensKit contributors (see CONTRIBUTORS.md)
 * Copyright 2010-2014 Regents of the University of Minnesota
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
apply from: "$rootDir/gradle/maven.gradle"
apply plugin: 'groovy'
apply from: "$rootDir/gradle/test-utils.gradle"

dependencies {
    compileOnly group: 'com.google.auto.service', name: 'auto-service', version: '1.0-rc2'

    compile project(':lenskit-api')

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
    compile group: 'net.jcip', name: 'jcip-annotations', version: '1.0'
    compile group: 'it.unimi.dsi', name:'fastutil', version: '8.1.0'
    compile group: 'org.grouplens.grapht', name: 'grapht', version: '0.11.0-SNAPSHOT'
    compile group: 'com.google.guava', name: 'guava', version: guavaVersion
    compile group: 'org.joda', name: 'joda-convert', version: '1.8.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.4'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.7.4'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    compile group:'org.apache.commons', name:'commons-math3', version:'3.6.1'
    compile group: 'org.apache.commons', name:'commons-text', version:'1.3'
    compile group:'org.ow2.asm', name:'asm-tree', version:'5.2'

    compile group: 'org.apache.commons', name: 'commons-compress', version: '1.12'

    runtime group: 'org.tukaani', name: 'xz', version: '1.5'

    testRuntime group: 'com.h2database', name: 'h2', version: '1.4.192'
}

meta {
    name 'LensKit Core'
    description 'The core of LensKit, providing basic implementations and algorithm support.'
}

/* Since we define an annotation processor in this project, run it in its own task */
task checkAnnotations(type: JavaCompile, dependsOn: classes) {
    source sourceSets.main.java
    classpath = sourceSets.main.compileClasspath
    destinationDir = file("$buildDir/check-output")

    options.fork = false
    options.compilerArgs << '-proc:only'
}
check.dependsOn checkAnnotations

// Make LensKit version info available
task versionInfo {
    mustRunAfter processResources
    ext.versionFile = {
        "$sourceSets.main.output.resourcesDir/META-INF/lenskit/version.properties"
    }
    outputs.file versionFile
    inputs.property 'version', version
    doLast {
        def vf = file(versionFile)
        mkdir vf.parentFile
        vf.text = "lenskit.version=$version\n"
    }
}
classes.dependsOn versionInfo

/* Generate the Git commit list */
task listGitCommits(group: 'build') {
    // where does the report go?
    ext.outputFile = "$sourceSets.main.output.resourcesDir/META-INF/lenskit/git-commits.lst"
    // make sure we don't get stomped on
    mustRunAfter processResources
    
    outputs.file outputFile
    // we change with the HEAD revision
    inputs.property('HEAD') { git.headRevision.name }

    doLast {
        mkdir file(outputFile).parentFile
        git.withRepo { repo, cmd ->
            logger.info 'git repository at {}', repo.directory
            def head = repo.resolve('HEAD')
            logger.info 'head revision: {}', head.name
            file(outputFile).withPrintWriter { out ->
                int n = 0
                for (commit in cmd.log().add(git.headRevision).call()) {
                    logger.debug 'found {}', commit.id
                    out.println commit.id.name
                    n += 1
                }
                logger.info 'listed {} revisions', n
            }
        }
    }
}
classes.dependsOn listGitCommits
