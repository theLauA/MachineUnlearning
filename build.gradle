/*
 * LensKit, an open-source toolkit for recommender systems.
 * Copyright 2014-2017 LensKit contributors (see CONTRIBUTORS.md)
 * Copyright 2010-2014 Regents of the University of Minnesota
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import org.lenskit.build.GitExtension
import org.apache.commons.lang3.BooleanUtils

plugins {
    id 'com.gradle.build-scan' version '1.8'
    id "org.sonarqube" version "2.5"
}

apply plugin: 'base'
apply plugin: 'project-report'

ext.webUrl = 'http://lenskit.org'

ext.guavaVersion = '22.0'

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

configurations {
    allDeps // collect all external dependencies of all modules
}

task ciPublish {
    description "Runs CI publication tasks (not on Travis)."
}

allprojects { project ->
    group 'org.lenskit'
    version '3.0-SNAPSHOT'

    ext.getConfigProperty = { name, dft ->
        if (project.hasProperty(name)) {
            return project.getProperty(name)
        } else {
            return dft
        }
    }

    repositories {
        if (getConfigProperty('maven.useLocal', 'false').toBoolean()) {
            logger.info 'Using Maven local repository'
            mavenLocal()
        }
        mavenCentral()
        if (project.version.endsWith('-SNAPSHOT')) {
            maven {
                url "https://oss.sonatype.org/content/repositories/snapshots/"
            }
        }
    }
    configurations {
        // the 'support' config will be for build helpers (e.g. JavaDoc taglets)
        support
    }

    tasks.withType(Javadoc).all { task ->
        task.options.encoding = 'UTF-8'
        task.onlyIf {
            !project.getConfigProperty('javadoc.skip', 'false').toBoolean()
        }
    }

    tasks.withType(JavaCompile).each { task ->
        task.options.fork = BooleanUtils.toBoolean(project.findProperty('forkCompilers') ?: 'yes')
    }
    tasks.withType(GroovyCompile).each { task ->
        task.options.fork = BooleanUtils.toBoolean(project.findProperty('forkCompilers') ?: 'yes')
        task.groovyOptions.fork = BooleanUtils.toBoolean(project.findProperty('forkCompilers') ?: 'yes')
    }

    extensions.create('git', GitExtension)
    apply from: "$rootDir/gradle/travis.gradle"

    // Provide support for forcing configuration deps to be resolved
    task resolveAll(group: 'build setup') {
        description 'Resolves and downloads all dependencies'
    }
    ciPrep.dependsOn resolveAll

    configurations.all { cfg ->
        def resolve = task("resolve${cfg.name.capitalize()}") {
            description "Resolve dependencies in the $cfg.name configuration."
            onlyIf {
                cfg.canBeResolved
            }
            doLast {
                logger.info 'resolving {}#{}', project.path, cfg.name
                def result = cfg.resolvedConfiguration
                result.rethrowFailure()
                for (f in result.resolvedArtifacts*.file) {
                    logger.info '{} depends on file {}', cfg.name, f
                }
            }
        }
        resolveAll.dependsOn resolve
    }

    ext.skipSlowTests = project.getConfigProperty('tests.skipSlow', 'false').toBoolean()
}

task reportTests(type: TestReport) {
    destinationDir file("$buildDir/reports/all-tests")
}

subprojects {
    apply plugin: 'java'
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    // don't package until testing
    tasks.matching({it.name == 'uploadArchives'}).each { task ->
        task.mustRunAfter check
    }
    // defer javadoc until after the build
    tasks.javadoc.mustRunAfter 'classes'

    tasks.withType(JavaCompile).all { task ->
        task.options.encoding = 'UTF-8'
    }
    compileJava {
        options.deprecation = true
        options.compilerArgs << '-Xlint' << '-Xlint:-processing'
    }
    test {
        maxHeapSize = '256m'
        enableAssertions = true
        reports.junitXml.enabled = true
        reports.html.enabled = true

        testLogging {
            showStackTraces true
            exceptionFormat "full"
        }
    }
    reportTests.reportOn test

    // some common deps shared by everything
    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    }

    apply from: "$rootDir/gradle/class-list.gradle"

    configurations.compile.dependencies.all { dep ->
        if (!(dep instanceof ProjectDependency)) {
            rootProject.configurations.allDeps.dependencies << dep
        }
    }
    configurations.compileOnly.dependencies.all { dep ->
        if (!(dep instanceof ProjectDependency)) {
            rootProject.configurations.allDeps.dependencies << dep
        }
    }
}

apply from: "$rootDir/gradle/license.gradle"
apply from: "$rootDir/gradle/javadoc.gradle"
apply from: "$rootDir/gradle/dist.gradle"

task report(group: 'verification', dependsOn: [projectReport]) {
    description 'Run all enabled quality reports.'
}

task tagsFile(type: Exec) {
    ext.dirs = new LinkedHashSet()
    subprojects.each { sp ->
        sp.sourceSets.each { ss ->
            dirs += ss.java.srcDirs
            if (ss.hasProperty('groovy')) {
                dirs += ss.groovy.srcDirs
            }
        }
    }
    dirs.each { inputs.dir it }
    outputs.file 'tags'

    executable 'ctags'
    args '-R'
    args ext.dirs
}

apply from: "$rootDir/gradle/website.gradle"
apply from: "$rootDir/gradle/lint.gradle"

if (file('local.gradle').exists()) {
    apply from: 'local.gradle'
}
