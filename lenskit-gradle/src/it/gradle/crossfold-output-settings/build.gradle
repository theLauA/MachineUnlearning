buildscript {
    repositories {
        maven {
            url "$project.testRepoURI"
        }
        mavenCentral()
    }
    dependencies {
        classpath 'org.hamcrest:hamcrest-library:1.3'
        classpath "org.lenskit:lenskit-gradle:$project.lenskitVersion"
    }
}

import static org.hamcrest.MatcherAssert.assertThat
import static org.hamcrest.Matchers.*
import org.lenskit.gradle.*

apply from: 'common.gradle'
apply plugin: 'lenskit'
apply from: 'generate-ratings.gradle'
apply from: 'renjin.gradle'

task crossfold(type: Crossfold) {
    dependsOn generateRatings
    inputFile "$buildDir/ratings.csv"
    outputDir "$buildDir/xfout"
    outputFormat 'gz'
}

task checkXF {
    dependsOn crossfold
    doLast {
        assertThat(crossfold.maxMemory.getOrNull(), nullValue())
        assertThat("output directory exists",
                   file("$buildDir/xfout").isDirectory())
        for (int i in 1..5) {
            assertThat("training file $i",
                       file(String.format('%s/xfout/part%02d.train.csv.gz', buildDir, i)).exists())
            assertThat("testing file $i",
                       file(String.format('%s/xfout/part%02d.test.csv.gz', buildDir, i)).exists())
        }
    }
}

runVerifyScript {
    dependsOn crossfold
    mustRunAfter checkXF
}

check.dependsOn checkXF
